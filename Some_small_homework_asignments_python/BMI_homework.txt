from tkinter import *


class Userinterface:

    def __init__(self):
        self.__mainwindow = Tk()
        self.__mainwindow.title("BMI calculator")

        # TODO: Change the title of the main window to be "BMI calculator"

        # TODO: Add GUI components to make the GUI understandable for the
        # user, for example labels to indicate what the user should write
        # in the Entry-components.

        # TODO: Create an Entry-component for the weight.
        self.__weight_value = Entry(self.__mainwindow)

        # TODO: Create an Entry-component for the height.
        self.__height_value = Entry(self.__mainwindow)

        # TODO: Create a Button that will call the calculate_BMI-method.
        # TODO: Change the colour of the Button to something else than
        # the default colour.
        self.__calculate_button = Button(self.__mainwindow,text="t채m채 on nappi",command= self.calculate_BMI)
        # TODO: Create a Label that will show the decimal value of the BMI 
        # after it has been calculated.
        self.__result_text = Label(self.__mainwindow,text="results here")
        # TODO: Create a Label that will show a verbal description of the BMI
        # after the BMI has been calculated.
        self.__explanation_text = Label(self.__mainwindow,text="explanation here")
        # TODO: Create a button that will call the stop-method.
        self.__stop_button = Button(self.__mainwindow,text="t채m채 on SEIS nappi",command=self.stop)

        # TODO: Place the components in the GUI as you wish.
        # If you read the Gaddis book, you can use pack here instead of grid!
        self.__weight_value.grid(row=2,column=1)
        Label(self.__mainwindow,text="Enter your weight here").grid(row=1,column=1)
        self.__height_value.grid(row=2,column=2)
        Label(self.__mainwindow,text="Enter your height here").grid(row=1,column=2)
        self.__calculate_button.grid(row=2,column=3)
        self.__stop_button.grid(row=6,column=1)
        self.__result_text.grid(row=4,column=1)
        Label(self.__mainwindow, text="Here are your results:").grid(row=3,column=1)
        self.__explanation_text.grid(row=5,column=1)

    # TODO: Implement this method.
    def calculate_BMI(self):
        """ Section b) This method calculates the BMI of the user and
            displays it. First the method will get the values of
            height and weight from the GUI components
            self.__height_value and self.__weight_value.  Then the
            method will calculate the value of the BMI and show it in
            the element self.__result_text. 
            
            Section e) Last, the method will display a verbal
            description of the BMI in the element
            self.__explanation_text. 
        """
        if self.check_values() is False:
            return
        else:
            (weight,height) = self.check_values()
            self.__BMI = round(weight/(height*height),2)
            self.__result_text.configure(text=self.__BMI)
            self.explain(self.__BMI)

    # TODO: Implement this method.
    def reset_fields(self):
        """ In error situations this method will zeroize the elements
            self.__result_text, self.__height_value, and self.__weight_value.
        """
        self.__weight_value.delete(0, 'end')
        self.__height_value.delete(0, 'end')
        self.__result_text.configure(text="")
        return

    def stop(self):
        """ Ends the execution of the program.
        """
        self.__mainwindow.destroy()

    def start(self):
        """ Starts the mainloop. 
        """
        self.__mainwindow.mainloop()
    def check_values(self):
        try:
            weight = float(self.__weight_value.get())
            height = float(self.__height_value.get())
            if weight <= 0 or height <= 0:
                self.__explanation_text.configure(text="Error: height and weight must be numbers.")
                self.reset_fields()
                return False
        except ValueError:
            self.__explanation_text.configure(text="Error: height and weight must be positive.")
            self.reset_fields()
            return False
        return weight,height

    def explain(self, BMI):
        if BMI < 18.5:
            self.__explanation_text.configure(text="You are underweight.")
        elif BMI >= 18.5 and BMI <= 25:
            self.__explanation_text.configure(text="Your weight is normal.")
        else:
            self.__explanation_text.configure(text="You are overweight.")
        return

def main():
    ui = Userinterface()
    ui.start()


main()